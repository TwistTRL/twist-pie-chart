{"version":3,"sources":["lib/index.js","lib/PieChart.js","index.js"],"names":["PieChart","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","drawPieChart","ctx","colors","r","x","y","offsetX","offsetY","medianAngleRad","cosMedianAngle","sinMedianAngle","outerLabelAngleDeg","selected","arguments","length","undefined","isPickingCanvas","beginAngle","endAngle","cx","pieChartCanvasW","cy","pieChartCanvasH","label","fillColor","maxUsedOuterLabelAngleDeg","canvas","width","clearRect","i","aggData","type","rad","Math","cos","sin","roundDegToMultiOfTen","toDegree","beginPath","fillStyle","moveTo","arc","lineTo","strokeStyle","fill","textAlign","textBaseline","font","percent","fillText","outerLabelCosMedianAngle","toRadians","outerLabelSinMedianAngle","outerLabelR","outerLabelX","outerLabelY","fontW","measureText","fontH","parseInt","match","rect","lineWidth","stroke","deg","Number","String","slice","angle","PI","findPos","obj","curleft","curtop","offsetParent","offsetLeft","offsetTop","digToRgbStr","num","pieChartPickingColorOffSet","randomRgba","o","round","random","toFixed","handleMouseMove","e","pos","pieChartCanvas","pageX","pageY","p","pieChartPickingCtx","getImageData","data","currentColorIndex","pieChartColors","map","d","push","dataTypeToColorDict","pieChartCtx","setState","toolTipLeft","clientX","toolTipTop","clientY","canvasToolTipVisibility","currentHovering","objectSpread","state","drawBreakDownBars","handleMouseOut","title","typeToColorDict","pieChartToolTipW","pieChartToolTipH","pieChartToolTipOffsetY","colorToDataTypeDict","pieChartPickingColors","_this2","refs","pieChartPickingCanvas","tooltipCanvas","getContext","aggTheData","_this3","rawData","_this4","aggDataTypeTable","dataSum","value","keys","key","index","sort","a","b","peach","peach1","orange","cyan","red","rSet","Set","oSet","ub","lb","has","fillRect","styles","chartContainer","pieChartTitle","fontSize","pickingCanvas","display","tooltipContainer","height","left","top","visibility","zIndex","react_default","createElement","className","style","ref","onMouseMove","onMouseOut","PureComponent","App","handleSubmit","preventDefault","jsonStr","replace","s","substring","json","JSON","parse","concat","toConsumableArray","MEDS","FLUSHES","TPN","FEEDS","lol434ra","xbo4334x","meds","handleRemoveBtnCLick","bind","assertThisInitialized","self","setInterval","simulateDataChange","addOrRemove","floor","medIndex","Fragment","onSubmit","placeholder","element","onClick","lib","Component","ReactDOM","render","src_App","document","getElementById"],"mappings":"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","file":"static/js/main.9a9db722.chunk.js","sourcesContent":["import PieChart from \"./PieChart\";\nexport default PieChart;","import React, { PureComponent } from \"react\";\nimport \"./PieChart.css\"\n\nclass PieChart extends PureComponent {\n    constructor(props) {\n        super(props)\n        this.data = this.props.data\n        this.title = this.props.title\n        this.typeToColorDict = this.props.dataTypeToColorDict\n        this.pieChartCtx = null\n        this.pieChartPickingCtx = null\n\n        this.pieChartCanvasW = this.props.width\n        this.pieChartCanvasH = 400\n        this.pieChartToolTipW = 150\n        this.pieChartToolTipH = 190\n        this.pieChartToolTipOffsetY = 60\n\n        this.state = {\n            canvasToolTipVisibility: \"hidden\",\n            toolTipLeft: this.pieChartCanvasW - this.pieChartToolTipW,\n            toolTipTop: this.pieChartCanvasH - this.pieChartToolTipH + this.pieChartToolTipOffsetY\n        }\n\n        // pie chart data setup\n        this.colorToDataTypeDict = {}\n        this.pieChartColors = []\n        this.pieChartPickingColors = []\n        this.pieChartPickingColorOffSet = 7\n\n        for (var i = 1; i <= this.data.length; i++) {\n            this.pieChartPickingColors.push(this.digToRgbStr(i))\n        }\n    }\n\n    componentDidMount() {\n        this.pieChartCanvas = this.refs.canvas\n        this.pieChartPickingCanvas = this.refs.pieChartPickingCanvas\n        this.tooltipCanvas = this.refs.tooltipCanvas\n        this.pieChartCtx = this.pieChartCanvas.getContext(\"2d\")\n        this.pieChartPickingCtx = this.pieChartPickingCanvas.getContext(\"2d\")\n        this.aggData = this.aggTheData(this.data)\n        this.pieChartPickingColors = []\n        for (var i = 1; i <= this.aggData.length; i++) {\n            this.pieChartPickingColors.push(this.digToRgbStr(i))\n        }\n        let pieChartColors = []\n        this.aggData.map(d => {\n            pieChartColors.push(this.props.dataTypeToColorDict[d[\"type\"]])\n        })\n        this.drawPieChart(this.pieChartCtx, pieChartColors)\n        this.drawPieChart(this.pieChartPickingCtx, this.pieChartPickingColors, \" \", true)\n    }\n\n    componentDidUpdate() {\n        this.data = this.props.data\n        this.title = this.props.title\n        this.typeToColorDict = this.props.dataTypeToColorDict\n        this.aggData = this.aggTheData(this.data)\n        this.pieChartPickingColors = []\n        for (var i = 1; i <= this.aggData.length; i++) {\n            this.pieChartPickingColors.push(this.digToRgbStr(i))\n        }\n        let pieChartColors = []\n        this.aggData.map(d => {\n            pieChartColors.push(this.props.dataTypeToColorDict[d[\"type\"]])\n        })\n        if (this.state.canvasToolTipVisibility === \"hidden\") {\n            this.drawPieChart(this.pieChartCtx, pieChartColors)\n            this.drawPieChart(this.pieChartPickingCtx, this.pieChartPickingColors, \" \", true)\n        }\n    }\n\n    aggTheData(rawData) {\n        let aggData = []\n        let aggDataTypeTable = {}\n        this.dataSum = 0\n        this.pieChartColors = []\n\n        rawData.map(d => {\n            this.dataSum += d.value\n            if (!aggDataTypeTable[d.type]) {\n                aggDataTypeTable[d.type] = { \"value\": d.value }\n            } else {\n                aggDataTypeTable[d.type] = { \"value\": aggDataTypeTable[d.type][\"value\"] += d.value }\n            }\n        })\n\n        Object.keys(aggDataTypeTable).map((key, index) => {\n            let type = aggDataTypeTable[key]\n            this.pieChartColors.push(this.typeToColorDict[key])\n            type[\"percent\"] = type[\"value\"] / this.dataSum\n            type[\"rad\"] = type[\"percent\"] * 2 * Math.PI\n            type[\"type\"] = key\n            this.colorToDataTypeDict[this.pieChartColors[index]] = type\n            aggData[index] = type\n        })\n\n        aggData.sort((a, b) => {\n            return a.rad - b.rad\n        })\n\n        return aggData\n    }\n\n    // pass in data too\n    drawPieChart = (ctx, colors, selected = \"\", isPickingCanvas = false) => {\n        var offset = 10\n        var beginAngle = 0\n        var endAngle = 0\n        var r, x, y, offsetX, offsetY, medianAngleRad, cosMedianAngle, sinMedianAngle\n        var cx = this.pieChartCanvasW / 2\n        var cy = this.pieChartCanvasH / 2 + 30\n        var label = \"ERROR\"\n        var fillColor = \"\"\n        var maxUsedOuterLabelAngleDeg = 0\n        var outerLabelAngleDeg\n\n        if (ctx) {\n            ctx.canvas.width = ctx.canvas.width\n            ctx.clearRect(0, 0, this.pieChartCanvasW, this.pieChartCanvasH)\n\n            for (var i = 0; i < this.aggData.length; i++) {\n                r = isPickingCanvas ? this.pieChartCanvasW / 4 + 10 : this.pieChartCanvasW / 4\n                label = this.aggData[i].type\n                beginAngle = endAngle\n                endAngle = endAngle + this.aggData[i].rad\n                medianAngleRad = (endAngle + beginAngle) / 2\n                cosMedianAngle = Math.cos(medianAngleRad)\n                sinMedianAngle = Math.sin(medianAngleRad)\n                x = cx + r * 0.60 * cosMedianAngle\n                y = cy + r * 0.60 * sinMedianAngle\n                fillColor = colors[i]\n\n                if (isPickingCanvas) {\n                    // picking canvas\n                    offsetX = 0\n                    offsetY = 0\n                } else if (fillColor === selected) {\n                    // for hovering effect\n                    offsetX = cosMedianAngle * offset\n                    offsetY = sinMedianAngle * offset\n                } else {\n                    offsetX = cosMedianAngle * 2\n                    offsetY = sinMedianAngle * 2\n                }\n\n                // for outer labeling\n                outerLabelAngleDeg = this.roundDegToMultiOfTen(this.toDegree(medianAngleRad))\n                if (outerLabelAngleDeg <= maxUsedOuterLabelAngleDeg + 5) {\n                    maxUsedOuterLabelAngleDeg += 6\n                    outerLabelAngleDeg = maxUsedOuterLabelAngleDeg\n                } else {\n                    maxUsedOuterLabelAngleDeg = outerLabelAngleDeg\n                }\n\n                // draw the slice\n                ctx.beginPath()\n                ctx.fillStyle = fillColor\n                ctx.moveTo(cx + offsetX, cy + offsetY)\n                ctx.arc(cx + offsetX, cy + offsetY, r, beginAngle, endAngle)\n                ctx.lineTo(cx + offsetX, cy + offsetY)\n                ctx.strokeStyle = fillColor  //'rgba(0, 0, 0, 0.4)'\n                ctx.fill()\n\n                //label styling\n                ctx.textAlign = \"center\"\n                ctx.textBaseline = \"top\"\n                // hovering effect\n                ctx.font = selected !== fillColor ? \"bold 10pt MuseoSans\" : \"900 10pt MuseoSans\"\n                ctx.fillStyle = isPickingCanvas ? fillColor : '#1f589d'\n\n                if (this.aggData[i].percent > 0.15) {\n                    if (!isPickingCanvas) {\n                        // draw the inner label\n                        ctx.fillText(label, x, y)\n                    }\n                } else {\n                    var outerLabelCosMedianAngle = Math.cos(this.toRadians(outerLabelAngleDeg))\n                    var outerLabelSinMedianAngle = Math.sin(this.toRadians(outerLabelAngleDeg))\n                    // modify the radius for the picking canvas so that label rect is drawn at the same position\n                    // as the visible canvas\n                    var outerLabelR = isPickingCanvas ? r -= 10 : r\n                    var outerLabelX = cx + outerLabelR * 0.80 * outerLabelCosMedianAngle + outerLabelR / 2 * outerLabelCosMedianAngle\n                    var outerLabelY = cy + outerLabelR * 0.90 * outerLabelSinMedianAngle + outerLabelR / 2 * outerLabelSinMedianAngle\n\n                    if (!isPickingCanvas) {\n                        if (this.aggData[i].percent > 0.15) {\n                            // draw the inner label\n                            ctx.fillText(label, x, y)\n                        }\n\n                        // draw the label line\n                        x = cx + r * 0.90 * cosMedianAngle\n                        y = cy + r * 0.90 * sinMedianAngle\n                        ctx.lineWidth = selected === fillColor[i] ? 2 : 1.3\n                        ctx.beginPath()\n                        ctx.moveTo(x, y)\n                        ctx.lineTo(x + r / 5 * cosMedianAngle, y + r / 5 * sinMedianAngle)\n\n                        // position label differently depending on the angle \n                        if (outerLabelAngleDeg >= 90 && outerLabelAngleDeg < 180) {\n                            // bottom left\n                            ctx.textAlign = \"right\"\n                            ctx.textBaseline = \"top\"\n                        } else if (outerLabelAngleDeg >= 180 && outerLabelAngleDeg < 270) {\n                            // top left\n                            ctx.textAlign = \"right\"\n                            ctx.textBaseline = \"bottom\"\n                        } else if (outerLabelAngleDeg >= 270) {\n                            // top right\n                            ctx.textAlign = \"left\"\n                            ctx.textBaseline = \"bottom\"\n                        } else {\n                            ctx.textAlign = \"left\"\n                            ctx.textBaseline = \"top\"\n                        }\n\n                        // draw angled line\n                        ctx.lineTo(outerLabelX, outerLabelY)\n                        ctx.stroke()\n                        // draw the outer label\n                        ctx.fillText(label, outerLabelX, outerLabelY);\n                    } else {\n                        // draw the label picking area \n                        // manually offsetting x and y to take the canvas text align into account\n                        var fontW = ctx.measureText(label).width\n                        var fontH = parseInt(ctx.font.match(/\\d+/), 11)\n                        var rectHeight = 12\n\n                        if (outerLabelAngleDeg >= 90 && outerLabelAngleDeg < 180) {\n                            // bottom left\n                            ctx.rect(outerLabelX - fontW, outerLabelY, fontW, rectHeight)\n                        } else if (outerLabelAngleDeg >= 180 && outerLabelAngleDeg < 270) {\n                            // top left\n                            ctx.rect(outerLabelX - fontW, outerLabelY - fontH - 2, fontW, rectHeight)\n                        } else if (outerLabelAngleDeg >= 270) {\n                            // top right\n                            ctx.rect(outerLabelX, outerLabelY - fontH - 2, fontW, rectHeight)\n                        } else {\n                            // bottom right\n                            ctx.rect(outerLabelX, outerLabelY, fontW, rectHeight)\n                        }\n\n                        ctx.fillStyle = fillColor[i]\n                        ctx.fill()\n                    }\n                }\n            }\n        }\n    }\n\n    roundDegToMultiOfTen = (deg) => {\n        if (deg < 10) {\n            return 10\n        } else if (deg >= 350) {\n            return 360\n        } else {\n            return Number(String(deg).slice(0, -1) + 0)\n        }\n    }\n\n    toDegree = (angle) => {\n        return angle * (180 / Math.PI);\n    }\n\n    toRadians = (angle) => {\n        return angle * (Math.PI / 180);\n    }\n\n    findPos = (obj) => {\n        var curleft = 0,\n            curtop = 0;\n        if (obj.offsetParent) {\n            do {\n                curleft += obj.offsetLeft;\n                curtop += obj.offsetTop;\n            } while ((obj = obj.offsetParent));\n            return { x: curleft, y: curtop };\n        }\n        return undefined;\n    }\n\n    // takes in 0-255 and turn it into rgb\n    digToRgbStr = (num) => {\n        return \"rgb(0,0,\" + (num * this.pieChartPickingColorOffSet) + \")\"\n    }\n\n    randomRgba = () => {\n        var o = Math.round, r = Math.random, s = 255;\n        return 'rgba(' + o(r() * s) + ',' + o(r() * s) + ',' + o(r() * s) + ',' + r().toFixed(1) + ')';\n    }\n\n    drawBreakDownBars() {\n        let colors = {\n            peach: this.randomRgba(),\n            peach1: this.randomRgba(),\n            orange: this.randomRgba(),\n            cyan: this.randomRgba(),\n            red: this.randomRgba()\n        };\n        const rSet = new Set([0, 1]);\n        const oSet = new Set([2, 3, 4, 5, 6]);\n        let ub = 0;\n        let lb = 10;\n        const ctx = this.tooltipCanvas.getContext(\"2d\");\n\n        for (let i = 0; i < 10; i++) {\n            let fillStyle;\n            ctx.moveTo(0, ub);\n            ctx.moveTo(0, lb);\n            if (oSet.has(i)) {\n                fillStyle = colors.orange;\n            }\n            else if (rSet.has(i)) {\n                fillStyle = colors.red;\n            }\n            else {\n                fillStyle = colors.cyan;\n            }\n            ctx.fillStyle = fillStyle;\n            //x, y, w, h\n            ctx.fillRect(20, lb, 20, 10);\n            ctx.fillStyle = \"black\";\n            ctx.fillText(\"TEST\", 50, lb + 10);\n            // move the drawing pointer down\n            ub = lb;\n            lb += 10;\n        }\n    }\n\n    handleMouseMove = (e) => {\n        var pos = this.findPos(this.pieChartCanvas);\n        var x = e.pageX - pos.x;\n        var y = e.pageY - pos.y;\n        var p = this.pieChartPickingCtx.getImageData(x, y, 1, 1).data;\n        var currentColorIndex = p[2] / this.pieChartPickingColorOffSet - 1\n        var originalXOffset = 75\n        var originalYOffset = 15\n\n        // redraw the chart to \"offset\" the slice that is being hovered over\n        // this.pieChartCtx.clearRect(0, 0, this.pieChartCanvasW, this.pieChartCanvasH);\n        let pieChartColors = []\n        this.aggData.map(d => {\n            pieChartColors.push(this.props.dataTypeToColorDict[d[\"type\"]])\n        })\n        this.drawPieChart(this.pieChartCtx, pieChartColors, pieChartColors[currentColorIndex]);\n\n        if (p[2] !== 0 && p[3] === 255) {\n            this.setState({\n                toolTipLeft: e.clientX - originalXOffset,\n                toolTipTop: e.clientY + originalYOffset,\n                canvasToolTipVisibility: \"visible\",\n                currentHovering: this.aggData[currentColorIndex]\n            })\n        } else {\n            this.setState({\n                ...this.state,\n                canvasToolTipVisibility: \"hidden\",\n            })\n        }\n\n        if (this.state.currentHovering !== this.aggData[currentColorIndex]) {\n            // draw the bars\n            this.drawBreakDownBars();\n        }\n    }\n\n    handleMouseOut = () => {\n        this.setState({\n            ...this.state,\n            canvasToolTipVisibility: \"hidden\"\n        })\n    }\n\n    render() {\n        const styles = {\n            chartContainer: {\n                width: this.props.width\n            },\n            pieChartTitle: {\n                fontSize: \"25pt\"\n            },\n            pickingCanvas: {\n                display: \"none\"\n            },\n            tooltipContainer: {\n                width: this.pieChartToolTipW,\n                height: this.pieChartToolTipH,\n                left: this.state.toolTipLeft,\n                top: this.state.toolTipTop,\n                visibility: this.state.canvasToolTipVisibility,\n                zIndex: 9999\n            }\n        }\n        return (\n            <div\n                className=\"pie-chart-container\"\n                style={{ width: styles.chartContainer.width }}>\n                <div className=\"pie-chart-title\" style={{ fontSize: styles.pieChartTitle.fontSize }}>\n                    <span>{this.title + \" \" + this.dataSum} </span>\n                    <span className=\"pie-chart-title-measurements\">mL/kg/day</span>\n                </div>\n                <canvas\n                    style={styles.pickingCanvas}\n                    className=\"pie-chart-picking-canvas\"\n                    ref=\"pieChartPickingCanvas\"\n                    width={this.pieChartCanvasW}\n                    height={this.pieChartCanvasH}\n                />\n                <canvas\n                    className=\"pie-chart-canvas\"\n                    ref=\"canvas\"\n                    width={this.pieChartCanvasW}\n                    height={this.pieChartCanvasH}\n                    onMouseMove={this.handleMouseMove}\n                    onMouseOut={this.handleMouseOut}\n                />\n                <div\n                    className=\"pie-chart-tooltip-container\"\n                    style={styles.tooltipContainer}>\n                    <span className=\"pie-chart-tooltip-title\">\n                        {this.state.currentHovering ? this.state.currentHovering[\"type\"] : \"\"}\n                    </span>\n                    <br />\n                    <span className=\"pie-chart-tooltip-percent\">\n                        {this.state.currentHovering ? Math.round(this.state.currentHovering[\"percent\"].toFixed(2) * 100) + \"% \" : \"\"}\n                    </span>\n                    <span className=\"pie-chart-tooltip-details\">\n                        of total\n                    </span>\n                    <canvas\n                        className=\"pie-chart-tooltip-canvas\"\n                        ref=\"tooltipCanvas\"\n                    />\n                </div>\n            </div>\n        )\n    }\n}\n\nexport default PieChart\n","import React, { Component, Fragment } from 'react';\nimport ReactDOM from 'react-dom';\nimport PieChart from \"./lib\";\n\nclass App extends Component {\n    constructor(props) {\n        super(props);\n\n        this.dataTypeToColorDict = {\n            MEDS: \"#C2EEF8\",\n            FLUSHES: \"#5DD2EF\",\n            TPN: \"#84A5D5\",\n            FEEDS: \"#A3DBDC\",\n            lol434ra: \"#C13BDA\",\n            xbo4334x: \"#613BFA\"\n        }\n\n        this.state = {\n            data: [\n                { value: 1, type: \"MEDS\" },\n                { value: 1, type: \"FLUSHES\" },\n                { value: 20, type: \"FEEDS\" },\n                { value: 10, type: \"FEEDS\" },\n                { value: 1, type: \"TPN\" }\n            ]\n        }\n\n        this.meds = [\"MEDS\", \"FLUSHES\", \"FEEDS\", \"TPN\"]\n\n        this.handleRemoveBtnCLick = this.handleRemoveBtnCLick.bind(this)\n    }\n\n    componentDidMount() {\n        let self = this\n        setInterval(function () {\n            self.simulateDataChange()\n        }, 1000)\n    }\n\n    handleRemoveBtnCLick() {\n        let data = this.state.data\n        data = data.slice(0, -1)\n        this.setState({\n            data: data\n        })\n    }\n\n    handleSubmit = (e) => {\n        if (e) e.preventDefault()\n        const data = this.data.value\n        var jsonStr = data.replace(/(\\w+:)|(\\w+ :)/g, function (s) {\n            return '\"' + s.substring(0, s.length - 1) + '\":'\n        })\n\n        let json = JSON.parse(jsonStr)\n        let newData = this.state.data\n        newData.push(json)\n        this.setState({\n            data: [...this.state.data, json]\n        })\n    }\n\n    simulateDataChange() {\n        let addOrRemove = Math.floor(Math.random() * 100) + 0\n        let medIndex = Math.floor(Math.random() * 4) + 0\n\n        if (addOrRemove % 11 === 0) {\n            let data = this.state.data\n            data = data.slice(0, -1)\n            this.setState({\n                data: data\n            })\n        } else {\n            let json = {\n                value: Math.floor(Math.random() * 100) + 1,\n                type: this.meds[medIndex]\n            }\n            let newData = this.state.data\n            newData.push(json)\n            this.setState({\n                data: [...this.state.data, json]\n            })\n        }\n    }\n\n    render() {\n        let data = this.state.data\n        return (\n            <>\n                <div>Pass in data in the form: {' { value: 1, type: \"MEDS\" } '}</div>\n                <form onSubmit={this.handleSubmit}>\n                    <input style={{\n                        height: \"50px\",\n                        width: \"50%\",\n                        fontSize: \"14pt\"\n                    }} placeholder=\"data\" type=\"text\" ref={(element) => { this.data = element }} />\n                    <button>ADD DATA</button>\n                </form>\n                <button onClick={this.handleRemoveBtnCLick}>REMOVE DATA</button>\n                <PieChart\n                    data={data}\n                    width={500}\n                    dataTypeToColorDict={this.dataTypeToColorDict}\n                    title={\"Calories\"} />\n            </>\n        )\n    }\n}\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n"],"sourceRoot":""}